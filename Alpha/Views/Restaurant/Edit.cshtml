@model Alpha.Models.EditRestoViewModel


@{
    ViewBag.Title = "Edit Restaurant";
}



<h2>Edit.</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Edit User Form.</h4>
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PhoneNumber)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Address, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Address, new { @class = "form-control", id = "TextBoxVenueLocation" })
                @Html.ValidationMessageFor(model => model.Address)
            </div>
        </div>

        <table class="table">
            @Html.Label("List of Administrator", new { @class = "control-label col-md-2" })
            @if (Model.AdministratorsList.Count() == 0)
            {
                <tr>
                    <td>
                        No entry
                    </td>
                </tr>
            }
            else
            {
                foreach (var item in Model.AdministratorsList)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                        </td>
                    </tr>
                }
            }
        </table>
        <table class="table">
            @Html.Label("List of Chefs", new { @class = "control-label col-md-2" }) |
            @Html.ActionLink("Add Chefs", "AddChefToRestaurant", new { RestoId = Model.Id })
            @if (Model.ChefsList.Count() == 0)
            {
                <tr>
                    <td>
                        No entry
                    </td>
                </tr>
            }
            else
            {
                foreach (var item in Model.ChefsList)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                        </td>
                    </tr>
                }
            }
        </table>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">

    $(function () {
        $("#TextBoxVenueLocation").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetEventVenuesList", "Home")",
                    data: { SearchText: request.term },
                    dataType: "json",
                    type: "GET",
                    success: function (data) {
                        if (data.length == 0) {
                            $('#EventVenueId').val("");
                            $('#VenueLocationMesssage').show();
                            return false;
                        }
                        else {
                            response($.map(data, function (item) {
                                return {
                                    label: item.description,
                                    value: item.place_id
                                }
                            }));
                        }
                    },
                    error: function (x, y, z) {
                        alert('error');
                    }
                });
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {
                $('#TextBoxVenueLocation').val(ui.item.label);
                $('#EventVenueId').val(ui.item.value);
                return false;
            }
        }).autocomplete("widget").addClass("CitiesAutocomplete");
    });
</script>
@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
}




